// contexts/GameSettingsContext.tsx
import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';
import { StorageService, AppSettings } from '../services/StorageService';

// –¢–∏–ø –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
export type DifficultySettings = {
  tails: number;
  rows: number;
  columns: number;
  label: string;
  testMode?: boolean;
};

// –¢–∏–ø –¥–ª—è —Ç–µ–º—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export type Theme = 'light' | 'dark' | 'retro';

// –ù–æ–≤—ã–π —Ç–∏–ø: —Ä–µ–∂–∏–º—ã –∏–≥—Ä—ã
export type GameMode = 'classic' | 'timed' | 'time_attack';

// –ù–æ–≤—ã–π —Ç–∏–ø: –∑–∞–ø–∏—Å—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
export interface ScoreRecord {
  playerName: string;
  difficulty: string;
  mode: GameMode;
  score: number; // –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è timed/time_attack, —Ö–æ–¥—ã –¥–ª—è classic
  date: string;
  moves?: number; // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–æ–¥—ã –¥–ª—è —Ä–µ–∂–∏–º–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–µ–º
}

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–∏–ø –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
type GameSettingsContextType = {
  difficulty: DifficultySettings;
  theme: Theme;
  playerName: string;
  gameMode: GameMode; // –ù–æ–≤–æ–µ: —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –∏–≥—Ä—ã
  scores: ScoreRecord[]; // –ù–æ–≤–æ–µ: –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
  setDifficulty: (settings: DifficultySettings) => void;
  setTheme: (theme: Theme) => void;
  setPlayerName: (name: string) => void;
  setGameMode: (mode: GameMode) => void; // –ù–æ–≤–æ–µ: —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –∏–≥—Ä—ã
  addScore: (record: Omit<ScoreRecord, 'date' | 'playerName'>) => void; // –ù–æ–≤–æ–µ: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  saveSettings: () => Promise<void>;
  loadSettings: () => Promise<void>;
};

// –í–∞—Ä–∏–∞–Ω—Ç—ã —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä—ã
export const difficultyLevels: DifficultySettings[] = [
  { label: '–õ–µ–≥–∫–∞—è (3x3)', tails: 8, rows: 3, columns: 3 },
  { label: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è (4x4)', tails: 15, rows: 4, columns: 4 },
  { label: '–°–ª–æ–∂–Ω–∞—è (5x5)', tails: 24, rows: 5, columns: 5 },
  { label: '–≠–∫—Å–ø–µ—Ä—Ç (6x6)', tails: 35, rows: 6, columns: 6 },
  { label: '–¢–µ—Å—Ç–æ–≤—ã–π (3x3)', tails: 8, rows: 3, columns: 3, testMode: true }
];

// –†–µ–∂–∏–º—ã –∏–≥—Ä—ã
export const gameModes = [
  {
    value: 'classic' as GameMode,
    label: 'üèÜ –ö–ª–∞—Å—Å–∏–∫–∞',
    description: '–°–æ–±—Ä–∞—Ç—å –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤',
    timeLimit: 0 // –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
  },
  {
    value: 'timed' as GameMode,
    label: '‚è±Ô∏è –° —Ç–∞–π–º–µ—Ä–æ–º',
    description: '–°–æ–±—Ä–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ',
    timeLimit: 0 // –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è
  },
  {
    value: 'time_attack' as GameMode,
    label: 'üö® –ù–∞ –≤—Ä–µ–º—è',
    description: '–°–æ–±—Ä–∞—Ç—å –∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è',
    timeLimit: 300 // 5 –º–∏–Ω—É—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ
  },
];

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const defaultSettings: AppSettings = {
  difficulty: difficultyLevels[1], // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å
  theme: 'light',
  playerName: '–ò–≥—Ä–æ–∫',
  gameMode: 'classic', // –ù–æ–≤–æ–µ: —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  scores: [], // –ù–æ–≤–æ–µ: –ø—É—Å—Ç–æ–π —Ä–µ–π—Ç–∏–Ω–≥
};

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
const GameSettingsContext = createContext<GameSettingsContextType | undefined>(undefined);

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const GameSettingsProvider = ({ children }: { children: ReactNode }) => {
  const [difficulty, setDifficulty] = useState<DifficultySettings>(defaultSettings.difficulty);
  const [theme, setTheme] = useState<Theme>(defaultSettings.theme);
  const [playerName, setPlayerName] = useState<string>(defaultSettings.playerName);
  const [gameMode, setGameMode] = useState<GameMode>(defaultSettings.gameMode); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  const [scores, setScores] = useState<ScoreRecord[]>(defaultSettings.scores); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥
  const addScore = (record: Omit<ScoreRecord, 'date' | 'playerName'>) => {
    const newScore: ScoreRecord = {
      ...record,
      playerName,
      date: new Date().toISOString(),
    };

    setScores(prevScores => {
      const updatedScores = [...prevScores, newScore]
        .sort((a, b) => {
          // –î–ª—è —Ä–µ–∂–∏–º–æ–≤ —Å –≤—Ä–µ–º–µ–Ω–µ–º - –º–µ–Ω—å—à–µ –≤—Ä–µ–º—è –ª—É—á—à–µ
          if (a.mode !== 'classic' && b.mode !== 'classic') {
            return a.score - b.score;
          }
          // –î–ª—è –∫–ª–∞—Å—Å–∏–∫–∏ - –º–µ–Ω—å—à–µ —Ö–æ–¥–æ–≤ –ª—É—á—à–µ
          return a.score - b.score;
        })
        .slice(0, 50); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–æ–ø-50 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

      return updatedScores;
    });
  };

  // –û–±–µ—Ä—Ç–∫–∏ –¥–ª—è set-—Ñ—É–Ω–∫—Ü–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
  const setDifficultyAndSave = (newDifficulty: DifficultySettings) => {
    setDifficulty(newDifficulty);
  };

  const setThemeAndSave = (newTheme: Theme) => {
    setTheme(newTheme);
  };

  const setPlayerNameAndSave = (newName: string) => {
    setPlayerName(newName);
  };

  const setGameModeAndSave = (newMode: GameMode) => {
    setGameMode(newMode);
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const saveSettings = async () => {
    try {
      const currentSettings: AppSettings = {
        difficulty,
        theme,
        playerName,
        gameMode,
        scores,
      };
      await StorageService.saveSettings(currentSettings);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const loadSettings = async () => {
    try {
      const savedSettings = await StorageService.loadSettings();
      if (savedSettings) {
        setDifficulty(savedSettings.difficulty);
        setTheme(savedSettings.theme);
        setPlayerName(savedSettings.playerName);
        setGameMode(savedSettings.gameMode || 'classic');
        setScores(savedSettings.scores || []);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  useEffect(() => {
    saveSettings();
  }, [difficulty, theme, playerName, gameMode, scores]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    loadSettings();
  }, []);

  return (
    <GameSettingsContext.Provider value={{
      difficulty,
      theme,
      playerName,
      gameMode,
      scores,
      setDifficulty: setDifficultyAndSave,
      setTheme: setThemeAndSave,
      setPlayerName: setPlayerNameAndSave,
      setGameMode: setGameModeAndSave,
      addScore,
      saveSettings,
      loadSettings,
    }}>
      {children}
    </GameSettingsContext.Provider>
  );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useGameSettings = () => {
  const context = useContext(GameSettingsContext);
  if (context === undefined) {
    throw new Error('useGameSettings must be used within a GameSettingsProvider');
  }
  return context;
};
