// contexts/GameSettingsContext.tsx
import React, { createContext, useContext, useState, ReactNode, useEffect } from 'react';
import { StorageService, AppSettings } from '../services/StorageService';

// –¢–∏–ø –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—è
export type BoardSizeSettings = {
  tails: number;
  rows: number;
  columns: number;
  label: string;
  testMode?: boolean;
  timeLimit: number; // –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ time_attack
};

// –¢–∏–ø –¥–ª—è —Ç–µ–º—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export type Theme = 'light' | 'dark' | 'chinese';

// –¢–∏–ø: —Ä–µ–∂–∏–º—ã –∏–≥—Ä—ã
export type GameMode = 'classic' | 'timed' | 'time_attack';

// –¢–∏–ø: –∑–∞–ø–∏—Å—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
export interface ScoreRecord {
  playerName: string;
  boardSize: string; // –ò–∑–º–µ–Ω–µ–Ω–æ —Å difficulty –Ω–∞ boardSize
  mode: GameMode;
  score: number; // –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è timed/time_attack, —Ö–æ–¥—ã –¥–ª—è classic
  date: string;
  moves?: number;
}

// –¢–∏–ø –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
type GameSettingsContextType = {
  boardSize: BoardSizeSettings; // –ò–∑–º–µ–Ω–µ–Ω–æ —Å difficulty –Ω–∞ boardSize
  theme: Theme;
  playerName: string;
  gameMode: GameMode;
  scores: ScoreRecord[];
  setBoardSize: (settings: BoardSizeSettings) => void; // –ò–∑–º–µ–Ω–µ–Ω–æ
  setTheme: (theme: Theme) => void;
  setPlayerName: (name: string) => void;
  setGameMode: (mode: GameMode) => void;
  addScore: (record: Omit<ScoreRecord, 'date' | 'playerName'>) => void;
  saveSettings: () => Promise<void>;
  loadSettings: () => Promise<void>;
  getTimeLimit: () => number;
};

// –í–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–≤ –ø–æ–ª—è —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏ –¥–ª—è time_attack
export const boardSizes: BoardSizeSettings[] = [
  { 
    label: '3x3', 
    tails: 8, 
    rows: 3, 
    columns: 3, 
    timeLimit: 180 // 3 –º–∏–Ω—É—Ç—ã
  },
  { 
    label: '4x4', 
    tails: 15, 
    rows: 4, 
    columns: 4, 
    timeLimit: 300 // 5 –º–∏–Ω—É—Ç
  },
  { 
    label: '5x5', 
    tails: 24, 
    rows: 5, 
    columns: 5, 
    timeLimit: 600 // 10 –º–∏–Ω—É—Ç
  },
  { 
    label: '6x6', 
    tails: 35, 
    rows: 6, 
    columns: 6, 
    timeLimit: 900 // 15 –º–∏–Ω—É—Ç
  },
  { 
    label: '–¢–µ—Å—Ç', 
    tails: 8, 
    rows: 3, 
    columns: 3, 
    testMode: true, 
    timeLimit: 30 // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  }
];

// –†–µ–∂–∏–º—ã –∏–≥—Ä—ã
export const gameModes = [
  {
    value: 'classic' as GameMode,
    label: 'üèÜ –ö–ª–∞—Å—Å–∏–∫–∞',
    description: '–°–æ–±—Ä–∞—Ç—å –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤',
  },
  {
    value: 'timed' as GameMode,
    label: '‚è±Ô∏è –° —Ç–∞–π–º–µ—Ä–æ–º',
    description: '–°–æ–±—Ä–∞—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ',
  },
  {
    value: 'time_attack' as GameMode,
    label: 'üö® –ù–∞ –≤—Ä–µ–º—è',
    description: '–°–æ–±—Ä–∞—Ç—å –∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è',
  },
];

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const defaultSettings: AppSettings = {
  boardSize: boardSizes[1], // 4x4 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  theme: 'light',
  playerName: '–ò–≥—Ä–æ–∫',
  gameMode: 'classic',
  scores: [],
};

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
const GameSettingsContext = createContext<GameSettingsContextType | undefined>(undefined);

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è BoardSizeSettings —Å timeLimit
const getBoardSizeWithTimeLimit = (boardSize: any): BoardSizeSettings => {
  // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–∑–º–µ—Ä –≤ boardSizes
  const foundSize = boardSizes.find(size => size.label === boardSize.label);
  
  if (foundSize) {
    return foundSize;
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, —Å–æ–∑–¥–∞–µ–º —Å timeLimit –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  return {
    ...boardSize,
    timeLimit: defaultSettings.boardSize.timeLimit
  };
};

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const GameSettingsProvider = ({ children }: { children: ReactNode }) => {
  const [boardSize, setBoardSize] = useState<BoardSizeSettings>(defaultSettings.boardSize);
  const [theme, setTheme] = useState<Theme>(defaultSettings.theme);
  const [playerName, setPlayerName] = useState<string>(defaultSettings.playerName);
  const [gameMode, setGameMode] = useState<GameMode>(defaultSettings.gameMode);
  const [scores, setScores] = useState<ScoreRecord[]>(defaultSettings.scores);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è time_attack)
  const getTimeLimit = (): number => {
    if (gameMode === 'time_attack') {
      return boardSize.timeLimit;
    }
    return 0; // –î–ª—è classic –∏ timed –ª–∏–º–∏—Ç–∞ –Ω–µ—Ç
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥
  const addScore = (record: Omit<ScoreRecord, 'date' | 'playerName'>) => {
    const newScore: ScoreRecord = {
      ...record,
      playerName,
      date: new Date().toISOString(),
    };

    setScores(prevScores => {
      const updatedScores = [...prevScores, newScore]
        .sort((a, b) => {
          if (a.mode !== 'classic' && b.mode !== 'classic') {
            return a.score - b.score;
          }
          return a.score - b.score;
        })
        .slice(0, 50);
      return updatedScores;
    });
  };

  // –û–±–µ—Ä—Ç–∫–∏ –¥–ª—è set-—Ñ—É–Ω–∫—Ü–∏–π —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
  const setBoardSizeAndSave = (newBoardSize: BoardSizeSettings) => {
    setBoardSize(newBoardSize);
  };

  const setThemeAndSave = (newTheme: Theme) => {
    setTheme(newTheme);
  };

  const setPlayerNameAndSave = (newName: string) => {
    setPlayerName(newName);
  };

  const setGameModeAndSave = (newMode: GameMode) => {
    setGameMode(newMode);
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
  const saveSettings = async () => {
    try {
      const currentSettings: AppSettings = {
        boardSize,
        theme,
        playerName,
        gameMode,
        scores,
      };
      await StorageService.saveSettings(currentSettings);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  const loadSettings = async () => {
    try {
      const savedSettings = await StorageService.loadSettings();
      if (savedSettings) {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º boardSize —Å –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ–º –Ω–∞–ª–∏—á–∏—è timeLimit
        let loadedBoardSize: BoardSizeSettings;
        
        if (savedSettings.boardSize) {
          loadedBoardSize = getBoardSizeWithTimeLimit(savedSettings.boardSize);
        } else {
          loadedBoardSize = defaultSettings.boardSize;
        }

        setBoardSize(loadedBoardSize);
        setTheme(savedSettings.theme || defaultSettings.theme);
        setPlayerName(savedSettings.playerName || defaultSettings.playerName);
        setGameMode(savedSettings.gameMode || defaultSettings.gameMode);
        setScores(savedSettings.scores || defaultSettings.scores);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
  };

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
  useEffect(() => {
    saveSettings();
  }, [boardSize, theme, playerName, gameMode, scores]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Ä–µ–Ω–¥–µ—Ä–µ
  useEffect(() => {
    loadSettings();
  }, []);

  return (
    <GameSettingsContext.Provider value={{
      boardSize, // –ò–∑–º–µ–Ω–µ–Ω–æ
      theme,
      playerName,
      gameMode,
      scores,
      setBoardSize: setBoardSizeAndSave, // –ò–∑–º–µ–Ω–µ–Ω–æ
      setTheme: setThemeAndSave,
      setPlayerName: setPlayerNameAndSave,
      setGameMode: setGameModeAndSave,
      addScore,
      saveSettings,
      loadSettings,
      getTimeLimit,
    }}>
      {children}
    </GameSettingsContext.Provider>
  );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useGameSettings = () => {
  const context = useContext(GameSettingsContext);
  if (context === undefined) {
    throw new Error('useGameSettings must be used within a GameSettingsProvider');
  }
  return context;
};
