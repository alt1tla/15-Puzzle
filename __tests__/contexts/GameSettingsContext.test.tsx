// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
import { boardSizes } from '../../contexts/GameSettingsContext';

// Mock AsyncStorage
jest.mock('@react-native-async-storage/async-storage');

describe('GameSettingsContext Logic', () => {
  describe('Board Sizes', () => {
    it('has correct board size configurations', () => {
      expect(boardSizes).toHaveLength(5);
      
      const size3x3 = boardSizes.find(size => size.label === '3x3');
      expect(size3x3).toEqual({
        label: '3x3',
        tails: 8,
        rows: 3,
        columns: 3,
        timeLimit: 180
      });

      const size4x4 = boardSizes.find(size => size.label === '4x4');
      expect(size4x4).toEqual({
        label: '4x4',
        tails: 15,
        rows: 4,
        columns: 4,
        timeLimit: 300
      });
    });

    it('test mode has correct configuration', () => {
      const testSize = boardSizes.find(size => size.label === '–¢–µ—Å—Ç');
      expect(testSize).toEqual({
        label: '–¢–µ—Å—Ç',
        tails: 8,
        rows: 3,
        columns: 3,
        testMode: true,
        timeLimit: 30
      });
    });
  });

  describe('Game Modes', () => {
    it('has all game modes defined', () => {
      const { gameModes } = require('../../contexts/GameSettingsContext');
      
      expect(gameModes).toHaveLength(4);
      expect(gameModes.map((mode: any) => mode.value)).toEqual([
        'classic', 'timed', 'time_attack', 'image'
      ]);
    });

    it('classic mode has correct description', () => {
      const { gameModes } = require('../../contexts/GameSettingsContext');
      const classicMode = gameModes.find((mode: any) => mode.value === 'classic');
      
      expect(classicMode.label).toBe('üèÜ –ö–ª–∞—Å—Å–∏–∫–∞');
      expect(classicMode.description).toBe('–ó–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤');
    });
  });

  describe('Context Logic', () => {
    it('default settings are correct', () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      expect('4x4').toBe('4x4'); // –†–∞–∑–º–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      expect('light').toBe('light'); // –¢–µ–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      expect('classic').toBe('classic'); // –†–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    });

    it('score calculation works', () => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤
      const classicScore = 50; // –•–æ–¥—ã
      const timedScore = 120; // –°–µ–∫—É–Ω–¥—ã
      
      expect(classicScore).toBe(50);
      expect(timedScore).toBe(120);
    });
  });
});